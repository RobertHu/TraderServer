//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace Trader.Server.Security.SecurityServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecurityServicesSoap", Namespace="http://tempuri.org/")]
    public partial class SecurityServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRequestPermissionSettingSchmaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionSettingByObjectIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionSetting1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePermissionSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePermissionSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePermissionSetting1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePermissionSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPermission1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPermissionByParticipantOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPermission2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SecurityServices() {
            this.Url = global::Trader.Server.Properties.Settings.Default.AsyncSslServerTest_Security_SecurityServices_SecurityServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetRequestPermissionSettingSchmaCompletedEventHandler GetRequestPermissionSettingSchmaCompleted;
        
        /// <remarks/>
        public event GetPermissionSettingCompletedEventHandler GetPermissionSettingCompleted;
        
        /// <remarks/>
        public event GetPermissionSettingByObjectIDCompletedEventHandler GetPermissionSettingByObjectIDCompleted;
        
        /// <remarks/>
        public event GetPermissionSetting1CompletedEventHandler GetPermissionSetting1Completed;
        
        /// <remarks/>
        public event UpdatePermissionSettingCompletedEventHandler UpdatePermissionSettingCompleted;
        
        /// <remarks/>
        public event CreatePermissionSettingCompletedEventHandler CreatePermissionSettingCompleted;
        
        /// <remarks/>
        public event UpdatePermissionSetting1CompletedEventHandler UpdatePermissionSetting1Completed;
        
        /// <remarks/>
        public event DeletePermissionSettingCompletedEventHandler DeletePermissionSettingCompleted;
        
        /// <remarks/>
        public event CheckPermissionCompletedEventHandler CheckPermissionCompleted;
        
        /// <remarks/>
        public event CheckPermission1CompletedEventHandler CheckPermission1Completed;
        
        /// <remarks/>
        public event CheckPermissionByParticipantCompletedEventHandler CheckPermissionByParticipantCompleted;
        
        /// <remarks/>
        public event CheckPermission2CompletedEventHandler CheckPermission2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestPermissionSettingSchma", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRequestPermissionSettingSchma(System.Guid loginUserID) {
            object[] results = this.Invoke("GetRequestPermissionSettingSchma", new object[] {
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRequestPermissionSettingSchmaAsync(System.Guid loginUserID) {
            this.GetRequestPermissionSettingSchmaAsync(loginUserID, null);
        }
        
        /// <remarks/>
        public void GetRequestPermissionSettingSchmaAsync(System.Guid loginUserID, object userState) {
            if ((this.GetRequestPermissionSettingSchmaOperationCompleted == null)) {
                this.GetRequestPermissionSettingSchmaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestPermissionSettingSchmaOperationCompleted);
            }
            this.InvokeAsync("GetRequestPermissionSettingSchma", new object[] {
                        loginUserID}, this.GetRequestPermissionSettingSchmaOperationCompleted, userState);
        }
        
        private void OnGetRequestPermissionSettingSchmaOperationCompleted(object arg) {
            if ((this.GetRequestPermissionSettingSchmaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRequestPermissionSettingSchmaCompleted(this, new GetRequestPermissionSettingSchmaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPermissionSettingByParticipant", RequestElementName="GetPermissionSettingByParticipant", RequestNamespace="http://tempuri.org/", ResponseElementName="GetPermissionSettingByParticipantResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPermissionSettingByParticipantResult")]
        public System.Data.DataSet GetPermissionSetting(System.Guid participantID, string participantName, System.Guid loginUserID) {
            object[] results = this.Invoke("GetPermissionSetting", new object[] {
                        participantID,
                        participantName,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionSettingAsync(System.Guid participantID, string participantName, System.Guid loginUserID) {
            this.GetPermissionSettingAsync(participantID, participantName, loginUserID, null);
        }
        
        /// <remarks/>
        public void GetPermissionSettingAsync(System.Guid participantID, string participantName, System.Guid loginUserID, object userState) {
            if ((this.GetPermissionSettingOperationCompleted == null)) {
                this.GetPermissionSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionSettingOperationCompleted);
            }
            this.InvokeAsync("GetPermissionSetting", new object[] {
                        participantID,
                        participantName,
                        loginUserID}, this.GetPermissionSettingOperationCompleted, userState);
        }
        
        private void OnGetPermissionSettingOperationCompleted(object arg) {
            if ((this.GetPermissionSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionSettingCompleted(this, new GetPermissionSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPermissionSettingByObjectID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPermissionSettingByObjectID(System.Guid objectID, System.Guid loginUserID) {
            object[] results = this.Invoke("GetPermissionSettingByObjectID", new object[] {
                        objectID,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionSettingByObjectIDAsync(System.Guid objectID, System.Guid loginUserID) {
            this.GetPermissionSettingByObjectIDAsync(objectID, loginUserID, null);
        }
        
        /// <remarks/>
        public void GetPermissionSettingByObjectIDAsync(System.Guid objectID, System.Guid loginUserID, object userState) {
            if ((this.GetPermissionSettingByObjectIDOperationCompleted == null)) {
                this.GetPermissionSettingByObjectIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionSettingByObjectIDOperationCompleted);
            }
            this.InvokeAsync("GetPermissionSettingByObjectID", new object[] {
                        objectID,
                        loginUserID}, this.GetPermissionSettingByObjectIDOperationCompleted, userState);
        }
        
        private void OnGetPermissionSettingByObjectIDOperationCompleted(object arg) {
            if ((this.GetPermissionSettingByObjectIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionSettingByObjectIDCompleted(this, new GetPermissionSettingByObjectIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetPermissionSetting1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPermissionSetting", RequestElementName="GetPermissionSetting", RequestNamespace="http://tempuri.org/", ResponseElementName="GetPermissionSettingResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPermissionSettingResult")]
        public System.Data.DataSet GetPermissionSetting(System.Guid participantID, System.Guid objectID, string participantName, System.Guid loginUserID) {
            object[] results = this.Invoke("GetPermissionSetting1", new object[] {
                        participantID,
                        objectID,
                        participantName,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionSetting1Async(System.Guid participantID, System.Guid objectID, string participantName, System.Guid loginUserID) {
            this.GetPermissionSetting1Async(participantID, objectID, participantName, loginUserID, null);
        }
        
        /// <remarks/>
        public void GetPermissionSetting1Async(System.Guid participantID, System.Guid objectID, string participantName, System.Guid loginUserID, object userState) {
            if ((this.GetPermissionSetting1OperationCompleted == null)) {
                this.GetPermissionSetting1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionSetting1OperationCompleted);
            }
            this.InvokeAsync("GetPermissionSetting1", new object[] {
                        participantID,
                        objectID,
                        participantName,
                        loginUserID}, this.GetPermissionSetting1OperationCompleted, userState);
        }
        
        private void OnGetPermissionSetting1OperationCompleted(object arg) {
            if ((this.GetPermissionSetting1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionSetting1Completed(this, new GetPermissionSetting1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePermissionSettingByDataSet", RequestElementName="UpdatePermissionSettingByDataSet", RequestNamespace="http://tempuri.org/", ResponseElementName="UpdatePermissionSettingByDataSetResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdatePermissionSettingByDataSetResult")]
        public bool UpdatePermissionSetting(System.Data.DataSet permissionSettings, System.Guid loginUserID, out string message) {
            object[] results = this.Invoke("UpdatePermissionSetting", new object[] {
                        permissionSettings,
                        loginUserID});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePermissionSettingAsync(System.Data.DataSet permissionSettings, System.Guid loginUserID) {
            this.UpdatePermissionSettingAsync(permissionSettings, loginUserID, null);
        }
        
        /// <remarks/>
        public void UpdatePermissionSettingAsync(System.Data.DataSet permissionSettings, System.Guid loginUserID, object userState) {
            if ((this.UpdatePermissionSettingOperationCompleted == null)) {
                this.UpdatePermissionSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePermissionSettingOperationCompleted);
            }
            this.InvokeAsync("UpdatePermissionSetting", new object[] {
                        permissionSettings,
                        loginUserID}, this.UpdatePermissionSettingOperationCompleted, userState);
        }
        
        private void OnUpdatePermissionSettingOperationCompleted(object arg) {
            if ((this.UpdatePermissionSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePermissionSettingCompleted(this, new UpdatePermissionSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePermissionSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreatePermissionSetting(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID, out string message) {
            object[] results = this.Invoke("CreatePermissionSetting", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        setting,
                        loginUserID});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePermissionSettingAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID) {
            this.CreatePermissionSettingAsync(participantID, objectID, permissionID, participantName, permissionName, setting, loginUserID, null);
        }
        
        /// <remarks/>
        public void CreatePermissionSettingAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID, object userState) {
            if ((this.CreatePermissionSettingOperationCompleted == null)) {
                this.CreatePermissionSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePermissionSettingOperationCompleted);
            }
            this.InvokeAsync("CreatePermissionSetting", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        setting,
                        loginUserID}, this.CreatePermissionSettingOperationCompleted, userState);
        }
        
        private void OnCreatePermissionSettingOperationCompleted(object arg) {
            if ((this.CreatePermissionSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePermissionSettingCompleted(this, new CreatePermissionSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdatePermissionSetting1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePermissionSetting", RequestElementName="UpdatePermissionSetting", RequestNamespace="http://tempuri.org/", ResponseElementName="UpdatePermissionSettingResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdatePermissionSettingResult")]
        public bool UpdatePermissionSetting(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID, out string message) {
            object[] results = this.Invoke("UpdatePermissionSetting1", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        setting,
                        loginUserID});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePermissionSetting1Async(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID) {
            this.UpdatePermissionSetting1Async(participantID, objectID, permissionID, participantName, permissionName, setting, loginUserID, null);
        }
        
        /// <remarks/>
        public void UpdatePermissionSetting1Async(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, string setting, System.Guid loginUserID, object userState) {
            if ((this.UpdatePermissionSetting1OperationCompleted == null)) {
                this.UpdatePermissionSetting1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePermissionSetting1OperationCompleted);
            }
            this.InvokeAsync("UpdatePermissionSetting1", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        setting,
                        loginUserID}, this.UpdatePermissionSetting1OperationCompleted, userState);
        }
        
        private void OnUpdatePermissionSetting1OperationCompleted(object arg) {
            if ((this.UpdatePermissionSetting1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePermissionSetting1Completed(this, new UpdatePermissionSetting1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePermissionSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePermissionSetting(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, System.Guid loginUserID, out string message) {
            object[] results = this.Invoke("DeletePermissionSetting", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        loginUserID});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePermissionSettingAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, System.Guid loginUserID) {
            this.DeletePermissionSettingAsync(participantID, objectID, permissionID, participantName, permissionName, loginUserID, null);
        }
        
        /// <remarks/>
        public void DeletePermissionSettingAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string participantName, string permissionName, System.Guid loginUserID, object userState) {
            if ((this.DeletePermissionSettingOperationCompleted == null)) {
                this.DeletePermissionSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePermissionSettingOperationCompleted);
            }
            this.InvokeAsync("DeletePermissionSetting", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        participantName,
                        permissionName,
                        loginUserID}, this.DeletePermissionSettingOperationCompleted, userState);
        }
        
        private void OnDeletePermissionSettingOperationCompleted(object arg) {
            if ((this.DeletePermissionSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePermissionSettingCompleted(this, new DeletePermissionSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckPermission(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string permissionName, string participantName, System.Guid loginUserID, out string message) {
            object[] results = this.Invoke("CheckPermission", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        permissionName,
                        participantName,
                        loginUserID});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPermissionAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string permissionName, string participantName, System.Guid loginUserID) {
            this.CheckPermissionAsync(participantID, objectID, permissionID, permissionName, participantName, loginUserID, null);
        }
        
        /// <remarks/>
        public void CheckPermissionAsync(System.Guid participantID, System.Guid objectID, System.Guid permissionID, string permissionName, string participantName, System.Guid loginUserID, object userState) {
            if ((this.CheckPermissionOperationCompleted == null)) {
                this.CheckPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPermissionOperationCompleted);
            }
            this.InvokeAsync("CheckPermission", new object[] {
                        participantID,
                        objectID,
                        permissionID,
                        permissionName,
                        participantName,
                        loginUserID}, this.CheckPermissionOperationCompleted, userState);
        }
        
        private void OnCheckPermissionOperationCompleted(object arg) {
            if ((this.CheckPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPermissionCompleted(this, new CheckPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CheckPermission1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPermissionByDataSet", RequestElementName="CheckPermissionByDataSet", RequestNamespace="http://tempuri.org/", ResponseElementName="CheckPermissionByDataSetResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckPermissionByDataSetResult")]
        public System.Data.DataSet CheckPermission(System.Data.DataSet permissionSettings, System.Guid loginUserID) {
            object[] results = this.Invoke("CheckPermission1", new object[] {
                        permissionSettings,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPermission1Async(System.Data.DataSet permissionSettings, System.Guid loginUserID) {
            this.CheckPermission1Async(permissionSettings, loginUserID, null);
        }
        
        /// <remarks/>
        public void CheckPermission1Async(System.Data.DataSet permissionSettings, System.Guid loginUserID, object userState) {
            if ((this.CheckPermission1OperationCompleted == null)) {
                this.CheckPermission1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPermission1OperationCompleted);
            }
            this.InvokeAsync("CheckPermission1", new object[] {
                        permissionSettings,
                        loginUserID}, this.CheckPermission1OperationCompleted, userState);
        }
        
        private void OnCheckPermission1OperationCompleted(object arg) {
            if ((this.CheckPermission1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPermission1Completed(this, new CheckPermission1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPermissionByParticipant", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CheckPermissionByParticipant(System.Guid participantID, string participantName, System.Guid loginUserID) {
            object[] results = this.Invoke("CheckPermissionByParticipant", new object[] {
                        participantID,
                        participantName,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPermissionByParticipantAsync(System.Guid participantID, string participantName, System.Guid loginUserID) {
            this.CheckPermissionByParticipantAsync(participantID, participantName, loginUserID, null);
        }
        
        /// <remarks/>
        public void CheckPermissionByParticipantAsync(System.Guid participantID, string participantName, System.Guid loginUserID, object userState) {
            if ((this.CheckPermissionByParticipantOperationCompleted == null)) {
                this.CheckPermissionByParticipantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPermissionByParticipantOperationCompleted);
            }
            this.InvokeAsync("CheckPermissionByParticipant", new object[] {
                        participantID,
                        participantName,
                        loginUserID}, this.CheckPermissionByParticipantOperationCompleted, userState);
        }
        
        private void OnCheckPermissionByParticipantOperationCompleted(object arg) {
            if ((this.CheckPermissionByParticipantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPermissionByParticipantCompleted(this, new CheckPermissionByParticipantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="CheckPermission2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPermissionByResourceTypes", RequestElementName="CheckPermissionByResourceTypes", RequestNamespace="http://tempuri.org/", ResponseElementName="CheckPermissionByResourceTypesResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckPermissionByResourceTypesResult")]
        public System.Data.DataSet CheckPermission(System.Guid participantID, System.Guid loginUserID) {
            object[] results = this.Invoke("CheckPermission2", new object[] {
                        participantID,
                        loginUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPermission2Async(System.Guid participantID, System.Guid loginUserID) {
            this.CheckPermission2Async(participantID, loginUserID, null);
        }
        
        /// <remarks/>
        public void CheckPermission2Async(System.Guid participantID, System.Guid loginUserID, object userState) {
            if ((this.CheckPermission2OperationCompleted == null)) {
                this.CheckPermission2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPermission2OperationCompleted);
            }
            this.InvokeAsync("CheckPermission2", new object[] {
                        participantID,
                        loginUserID}, this.CheckPermission2OperationCompleted, userState);
        }
        
        private void OnCheckPermission2OperationCompleted(object arg) {
            if ((this.CheckPermission2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPermission2Completed(this, new CheckPermission2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRequestPermissionSettingSchmaCompletedEventHandler(object sender, GetRequestPermissionSettingSchmaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRequestPermissionSettingSchmaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRequestPermissionSettingSchmaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermissionSettingCompletedEventHandler(object sender, GetPermissionSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermissionSettingByObjectIDCompletedEventHandler(object sender, GetPermissionSettingByObjectIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionSettingByObjectIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionSettingByObjectIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermissionSetting1CompletedEventHandler(object sender, GetPermissionSetting1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionSetting1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionSetting1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePermissionSettingCompletedEventHandler(object sender, UpdatePermissionSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePermissionSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePermissionSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreatePermissionSettingCompletedEventHandler(object sender, CreatePermissionSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePermissionSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePermissionSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePermissionSetting1CompletedEventHandler(object sender, UpdatePermissionSetting1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePermissionSetting1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePermissionSetting1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePermissionSettingCompletedEventHandler(object sender, DeletePermissionSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePermissionSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePermissionSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPermissionCompletedEventHandler(object sender, CheckPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPermission1CompletedEventHandler(object sender, CheckPermission1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPermission1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPermission1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPermissionByParticipantCompletedEventHandler(object sender, CheckPermissionByParticipantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPermissionByParticipantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPermissionByParticipantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPermission2CompletedEventHandler(object sender, CheckPermission2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPermission2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPermission2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591